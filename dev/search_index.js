var documenterSearchIndex = {"docs":
[{"location":"#CLIMA-1","page":"Home","title":"CLIMA","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Climate Machine","category":"page"},{"location":"Utilities/RootSolvers/#RootSolvers-1","page":"RootSolvers","title":"RootSolvers","text":"","category":"section"},{"location":"Utilities/RootSolvers/#","page":"RootSolvers","title":"RootSolvers","text":"CurrentModule = CLIMA.RootSolvers","category":"page"},{"location":"Utilities/RootSolvers/#","page":"RootSolvers","title":"RootSolvers","text":"RootSolvers\nfind_zero","category":"page"},{"location":"Utilities/RootSolvers/#CLIMA.RootSolvers","page":"RootSolvers","title":"CLIMA.RootSolvers","text":"RootSolvers\n\nModule containing functions for solving roots of non-linear equations. The returned result is a tuple of the root and a Bool indicating convergence.\n\nfind_zero(f::F,\n           x_0::T,\n           x_1::T,\n           args::Tuple,\n           iter_params::IterParams{R, Int},\n           method::RootSolvingMethod\n           )::Tuple{T, Bool} where {F, R, T <: Union{R, AbstractArray{R}}}\n\n\n\nInterface\n\nfind_zero compute x^* such that f(x^*) = 0\n\nArguments\n\nf equation roots function, where f is callable via f(x, args...)\nx_0, x_1 initial guesses\nIterParams struct containing absolute tolerance on f(x^*) and maximum iterations\nRootSolvingMethod Algorithm to solve roots of the equation:\nSecantMethod Secant method\nRegulaFalsiMethod Regula Falsi Method\n\nSingle example\n\njulia> using RootSolvers\nx_0 = 0.0\nx_1 = 1.0\nf(x, y) = x^2 - y\nx_star2 = 10000.0\nargs = Tuple(x_star2)\nx_star = sqrt(x_star2)\ntol_abs = 1.0e-3\niter_max = 100\n\nx_root, converged = find_zero(f,\n                              x_0,\n                              x_1,\n                              args,\n                              IterParams(tol_abs, iter_max),\n                              SecantMethod())\n\nBroadcast example\n\nTo broadcast, wrap arguments that need not be broadcasted in a Ref.\n\njulia> using RootSolvers\nx_0 = rand(5,5)\nx_1 = rand(5,5).+2.0\nf(x, y) = x^2 - y\nx_star2 = 10000.0\nargs = Tuple(x_star2)\nx_star = sqrt(x_star2)\ntol_abs = 1.0e-3\niter_max = 100\nx_root, converged = find_zero.(f,\n                               x_0,\n                               x_1,\n                               Ref(args),\n                               Ref(IterParams(tol_abs, iter_max)),\n                               Ref(SecantMethod()))\n\n\n\n\n\n","category":"module"},{"location":"Utilities/RootSolvers/#CLIMA.RootSolvers.find_zero","page":"RootSolvers","title":"CLIMA.RootSolvers.find_zero","text":"find_zero(f, x_0, x_1, args, iter_params, SecantMethod)\n\nSolves the root equation, f, using Secant method. See RootSolvers for more information.\n\n\n\n\n\nfind_zero(f, x_0, x_1, args, iter_params, RegulaFalsiMethod)\n\nSolves the root equation, f, using Regula Falsi method. See RootSolvers for more information.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#MoistThermodynamics-Module-1","page":"MoistThermodynamics","title":"MoistThermodynamics Module","text":"","category":"section"},{"location":"Utilities/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"The MoistThermodynamics module provides all thermodynamic functions needed for the atmosphere and functions shared across model components. The functions are general for a moist atmosphere that includes suspended cloud condensate in the working fluid; the special case of a dry atmosphere is obtained for zero specific humidities (or simply by omitting the optional specific humidity arguments in the functions that are needed for a dry atmosphere). The general formulation assumes that there are tracers for the total water specific humidity q_tot, the liquid specific humidity q_liq, and the ice specific humidity q_ice to characterize the thermodynamic state and composition of moist air.","category":"page"},{"location":"Utilities/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"There are several types of functions:","category":"page"},{"location":"Utilities/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"Equation of state (ideal gas law):\nair_pressure\nSpecific gas constant and isobaric and isochoric specific heats of moist air:\ngas_constant_air\ncp_m\ncv_m\nSpecific latent heats of vaporization, fusion, and sublimation:\nlatent_heat_vapor\nlatent_heat_fusion\nlatent_heat_sublim\nSaturation vapor pressure and specific humidity over liquid and ice:\nsat_vapor_press_liquid\nsat_vapor_press_ice\nsat_shum\nFunctions computing energies and inverting them to obtain temperatures\ntotal_energy\ninternal_energy\nair_temperature\nFunctions to compute temperatures and partitioning of water into phases in thermodynamic equilibrium (when Gibbs' phase rule implies that the entire thermodynamic state of moist air, including the liquid and ice specific humidities, can be calculated from the 3 thermodynamic state variables, such as energy, pressure, and total specific humidity)\nliquid_fraction_equil (fraction of condensate that is liquid)\nsaturation_adjustment (compute temperature from energy, density, and total specific humidity)\nAuxiliary functions for diagnostic purposes, e.g., other thermodynamic quantities\nliquid_ice_pottemp (liquid-ice potential temperature)","category":"page"},{"location":"Utilities/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"A moist dynamical core that assumes equilibrium thermodynamics can be obtained from a dry dynamical core with total energy as a prognostic variable by including a tracer for the total specific humidity q_tot, using the functions, e.g., for the energies in the module, and computing the temperature T and the liquid and ice specific humidities q_liq and q_ice from the internal energy e_int by saturation adjustment:","category":"page"},{"location":"Utilities/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"    T = saturation_adjustment(e_int, ρ, q_tot);\n    q_liq, q_ice = phase_partitioning_eq(T, ρ, q_tot);","category":"page"},{"location":"Utilities/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"here, ρ is the density of the moist air, and the internal energy e_int = e_tot - e_kin - geopotential is the total energy e_tot minus kinetic energy e_kin and potential energy geopotential (all energies per unit mass). No changes to the \"right-hand sides\" of the dynamical equations are needed for a moist dynamical core that supports clouds, as long as they do not precipitate. Additional source-sink terms arise from precipitation.","category":"page"},{"location":"Utilities/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"Schematically, the workflow in such a core would look as follows:","category":"page"},{"location":"Utilities/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"\n    # initialize\n    geopotential = grav * z\n    q_tot          = ...\n    ρ            = ...\n\n    (u, v, w)    = ...\n    e_kin           = 0.5 * (u.^2 .+ v.^2 .+ w.^2)\n\n    e_tot        = total_energy(e_kin, geopotential, T, q_tot)\n\n    do timestep   # timestepping loop\n\n      # advance dynamical variables by a timestep (temperature typically\n      # appears in terms on the rhs, such as radiative transfer)\n      advance(u, v, w, ρ, e_tot, q_tot)\n\n      # compute internal energy from dynamic variables\n      e_int = e_tot - 0.5 * (u.^2 .+ v.^2 .+ w.^2) - geopotential\n\n      # compute temperature, pressure and condensate specific humidities,\n      T = saturation_adjustment(e_int, ρ, q_tot);\n      q_liq, q_ice = phase_partitioning_eq(T, ρ, q_tot);\n      p = air_pressure(T, ρ, q_tot, q_liq, q_ice)\n\n    end","category":"page"},{"location":"Utilities/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"For a dynamical core that additionally uses the liquid and ice specific humidities q_liq and q_ice as prognostic variables, and thus explicitly allows the presence of non-equilibrium phases such as supercooled water, the saturation adjustment in the above workflow is replaced by a direct calculation of temperature and pressure:","category":"page"},{"location":"Utilities/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"    T = air_temperature(e_int, q_tot, q_liq, q_ice)\n    p = air_pressure(T, ρ, q_tot, q_liq, q_ice)","category":"page"},{"location":"Utilities/MoistThermodynamics/#Functions-1","page":"MoistThermodynamics","title":"Functions","text":"","category":"section"},{"location":"Utilities/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"CurrentModule = CLIMA.MoistThermodynamics","category":"page"},{"location":"Utilities/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"ThermodynamicState\nPhaseEquil\nPhaseNonEquil\nLiquidIcePotTempSHumEquil","category":"page"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.ThermodynamicState","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.ThermodynamicState","text":"ThermodynamicState{DT}\n\nA thermodynamic state, which can be initialized for various thermodynamic formulations (via its sub-types). All ThermodynamicState's have access to functions to compute all other thermodynamic properties.\n\n\n\n\n\n","category":"type"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.PhaseEquil","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.PhaseEquil","text":"PhaseEquil{DT} <: ThermodynamicState\n\nA thermodynamic state assuming thermodynamic equilibrium (therefore, saturation adjustment is needed).\n\nConstructors\n\nPhaseEquil(e_int, q_tot, ρ)\n\nFields\n\ne_int\ninternal energy\nq_tot\ntotal specific humidity\ndensity\ndensity of air (potentially moist)\nT\ntemperature: computed via saturation_adjustment\n\n\n\n\n\n","category":"type"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.PhaseNonEquil","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.PhaseNonEquil","text":"PhaseNonEquil{DT} <: ThermodynamicState\n\nA thermodynamic state assuming thermodynamic non-equilibrium (therefore, temperature can be computed directly).\n\nConstructors\n\nPhaseNonEquil(e_int, q_tot, q_liq, q_ice, ρ)\n\nFields\n\ne_int\ninternal energy\nq_tot\ntotal specific humidity\nq_liq\nspecific humidity of liquid\nq_ice\nspecific humidity of ice\ndensity\ndensity of air (potentially moist)\n\n\n\n\n\n","category":"type"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.LiquidIcePotTempSHumEquil","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.LiquidIcePotTempSHumEquil","text":"LiquidIcePotTempSHumEquil(θ_liq_ice, q_tot, ρ, p)\n\nConstructs a PhaseEquil thermodynamic state from liquid-ice potential temperature.\n\nθ_liq_ice - liquid-ice potential temperature\nq_tot - total specific humidity\nρ - density\np - pressure\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"air_density\nair_pressure\nair_temperature\nair_temperature_from_liquid_ice_pottemp\ncp_m\ncv_m\ndry_pottemp\nexner\ngas_constant_air\nIce\ninternal_energy\ninternal_energy_sat\nlatent_heat_fusion\nlatent_heat_sublim\nlatent_heat_vapor\nLiquid\nliquid_fraction_equil\nliquid_fraction_nonequil\nliquid_ice_pottemp\nliquid_ice_pottemp_sat\nmoist_gas_constants\nphase_partitioning_eq\nsaturation_adjustment\nsaturation_excess\nsaturation_shum\nsaturation_shum_generic\nsaturation_vapor_pressure\nsoundspeed_air\nspecific_volume\ntotal_energy\nvirtual_pottemp","category":"page"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.air_density","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.air_density","text":"air_density(T, p[, q_tot=0, q_liq=0, q_ice=0])\n\nThe (moist-)air density from the equation of state (ideal gas law) where\n\nT air temperature\np pressure\n\nand, optionally,\n\nq_tot total specific humidity\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\nWithout the specific humidity arguments, the results are that of dry air.\n\n\n\n\n\nair_density(ts::ThermodynamicState)\n\nThe (moist-)air density from the equation of state (ideal gas law), given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.air_pressure","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.air_pressure","text":"air_pressure(T, ρ[, q_tot=0, q_liq=0, q_ice=0])\n\nThe air pressure from the equation of state (ideal gas law) where:\n\nT air temperature\nρ (moist-)air density\n\nand, optionally,\n\nq_tot total specific humidity\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\nWithout the specific humidity arguments, the results are that of dry air.\n\n\n\n\n\nair_pressure(ts::ThermodynamicState)\n\nThe air pressure from the equation of state (ideal gas law), given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.air_temperature","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.air_temperature","text":"air_temperature(e_int[, q_tot=0, q_liq=0, q_ice=0])\n\nThe air temperature, where\n\ne_int internal energy per unit mass\n\nand, optionally,\n\nq_tot total specific humidity\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\nWithout the specific humidity arguments, the results are that of dry air.\n\n\n\n\n\nair_temperature(ts::ThermodynamicState)\n\nThe air temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.air_temperature_from_liquid_ice_pottemp","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.air_temperature_from_liquid_ice_pottemp","text":"air_temperature_from_liquid_ice_pottemp(θ_liq_ice, p[, q_tot=0, q_liq=0, q_ice=0])\n\nThe air temperature, where\n\nθ_liq_ice liquid-ice potential temperature\np pressure\n\nand, optionally,\n\nq_tot total specific humidity\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\nWithout the specific humidity arguments, the results are that of dry air.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.cp_m","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.cp_m","text":"cp_m([q_tot=0, q_liq=0, q_ice=0])\n\nThe isobaric specific heat capacity of moist air where, optionally,\n\nq_tot total specific humidity\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\nWithout the specific humidity arguments, the results are that of dry air.\n\n\n\n\n\ncp_m(ts::[q_tot=0, q_liq=0, q_ice=0]))\n\nThe isobaric specific heat capacity of moist air, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.cv_m","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.cv_m","text":"cv_m([q_tot=0, q_liq=0, q_ice=0])\n\nThe isochoric specific heat capacity of moist air where, optionally,\n\nq_tot total specific humidity\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\nWithout the specific humidity arguments, the results are that of dry air.\n\n\n\n\n\ncv_m(ts::ThermodynamicState)\n\nThe isochoric specific heat capacity of moist air given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.dry_pottemp","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.dry_pottemp","text":"dry_pottemp(T, p, q_tot, q_liq, q_ice)\n\nThe dry potential temperature where\n\nT temperature\np pressure\n\nand, optionally,\n\nq_tot total specific humidity\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\n\n\n\n\n\n\ndry_pottemp(ts::ThermodynamicState)\n\nThe dry potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.exner","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.exner","text":"exner(p, q_tot, q_liq, q_ice)\n\nCompute the Exner function where\n\np pressure\n\nand, optionally,\n\nq_tot total specific humidity\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\n\n\n\n\nexner(ts::ThermodynamicState)\n\nCompute the Exner function, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.gas_constant_air","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.gas_constant_air","text":"gas_constant_air([q_tot=0, q_liq=0, q_ice=0])\n\nThe specific gas constant of moist air given\n\nq_tot total specific humidity\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\nWithout the specific humidity arguments, the results are that of dry air.\n\n\n\n\n\ngas_constant_air(ts::ThermodynamicState)\n\nThe specific gas constant of moist air given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.Ice","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.Ice","text":"Ice <: Phase\n\nAn ice phase, to dispatch over saturation_vapor_pressure and saturation_shum_generic.\n\n\n\n\n\n","category":"type"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.internal_energy","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.internal_energy","text":"internal_energy(T[, q_tot=0, q_liq=0, q_ice=0])\n\nThe internal energy per unit mass, given a thermodynamic state ts or\n\nT temperature\n\nand, optionally,\n\nq_tot total specific humidity\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\nWithout the specific humidity arguments, the results are that of dry air.\n\n\n\n\n\ninternal_energy(ts::ThermodynamicState)\n\nThe internal energy per unit mass, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.internal_energy_sat","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.internal_energy_sat","text":"internal_energy_sat(T, ρ, q_tot)\n\nThe internal energy per unit mass in thermodynamic equilibrium at saturation where\n\nT temperature\nρ (moist-)air density\nq_tot total specific humidity\n\n\n\n\n\ninternal_energy_sat(ts::ThermodynamicState)\n\nThe internal energy per unit mass in thermodynamic equilibrium at saturation, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.latent_heat_fusion","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.latent_heat_fusion","text":"latent_heat_fusion(T)\n\nThe specific latent heat of fusion where\n\nT temperature\n\n\n\n\n\nlatent_heat_fusion(ts::ThermodynamicState)\n\nThe specific latent heat of fusion given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.latent_heat_sublim","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.latent_heat_sublim","text":"latent_heat_sublim(T::Real)\n\nThe specific latent heat of sublimation where\n\nT temperature\n\n\n\n\n\nlatent_heat_sublim(ts::ThermodynamicState)\n\nThe specific latent heat of sublimation given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.latent_heat_vapor","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.latent_heat_vapor","text":"latent_heat_vapor(T::Real)\n\nThe specific latent heat of vaporization where\n\nT temperature\n\n\n\n\n\nlatent_heat_vapor(ts::ThermodynamicState)\n\nThe specific latent heat of vaporization given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.Liquid","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.Liquid","text":"Liquid <: Phase\n\nA liquid phase, to dispatch over saturation_vapor_pressure and saturation_shum_generic.\n\n\n\n\n\n","category":"type"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.liquid_fraction_equil","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.liquid_fraction_equil","text":"liquid_fraction_equil(T[, q_liq=0, q_ice=0])\n\nThe fraction of condensate, assuming phase equilibrium, that is liquid where\n\nT temperature\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\nIf the optional input arguments q_liq and q_ice are not given or are zero, the fraction of liquid is a function that is 1 above T_freeze and goes to zero below T_freeze. If q_liq or q_ice are nonzero, the liquid fraction is computed from them.\n\n\n\n\n\nliquid_fraction_equil(ts::ThermodynamicState)\n\nThe fraction of condensate that is liquid given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.liquid_fraction_nonequil","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.liquid_fraction_nonequil","text":"liquid_fraction_nonequil(T[, q_liq=0, q_ice=0])\n\nThe fraction of condensate, assuming phase non-equilibrium, that is liquid where\n\nT temperature\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\nIf the optional input arguments q_liq and q_ice are not given or are zero, the fraction of liquid is a function that is 1 above T_freeze and goes to zero below T_freeze. If q_liq or q_ice are nonzero, the liquid fraction is computed from them.\n\ntodo: Todo\nCurrently liquid_fraction_nonequil calls liquid_fraction_equil, but we should implement a more general function here.\n\n\n\n\n\nliquid_fraction_nonequil(ts::ThermodynamicState)\n\nThe fraction of condensate that is liquid given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.liquid_ice_pottemp","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.liquid_ice_pottemp","text":"liquid_ice_pottemp(T, p[, q_tot=0, q_liq=0, q_ice=0])\n\nThe liquid-ice potential temperature where\n\nT temperature\np pressure\n\nand, optionally,\n\nq_tot total specific humidity\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\n\n\n\n\nliquid_ice_pottemp(ts::ThermodynamicState)\n\nThe liquid-ice potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.liquid_ice_pottemp_sat","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.liquid_ice_pottemp_sat","text":"liquid_ice_pottemp_sat(T, p, q_tot, q_liq, q_ice)\n\nThe saturated liquid ice potential temperature where\n\nT temperature\np pressure\n\nand, optionally,\n\nq_tot total specific humidity\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\n\n\n\n\nliquid_ice_pottemp_sat(ts::ThermodynamicState)\n\nThe liquid potential temperature given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.moist_gas_constants","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.moist_gas_constants","text":"(R_m, cp_m, cv_m, γ_m) = moist_gas_constants([q_tot=0, q_liq=0, q_ice=0])\n\nWrapper to compute all gas constants at once, where optionally,\n\nq_tot total specific humidity\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\nThe function returns a tuple of\n\nR_m gas_constant_air\ncp_m cp_m\ncv_m cv_m\nγ_m = cp_m/cv_m\n\nWithout the specific humidity arguments, the results are that of dry air.\n\n\n\n\n\n(R_m, cp_m, cv_m, γ_m) = moist_gas_constants(ts::ThermodynamicState)\n\nWrapper to compute all gas constants at once, given a thermodynamic state ts.\n\nThe function returns a tuple of\n\nR_m gas_constant_air\ncp_m cp_m\ncv_m cv_m\nγ_m = cp_m/cv_m\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.phase_partitioning_eq","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.phase_partitioning_eq","text":"(q_liq, q_ice) = phase_partitioning_eq(T, ρ, q_tot)\n\nPartition the phases in equilibrium into\n\nthe liquid specific humidity q_liq, and\nthe ice specific humidity q_ice,\n\nusing the liquid_fraction_equil function where\n\nT temperature\nρ (moist-)air density\nq_tot total specific humidity\n\nThe residual q_tot - q_liq - q_ice is the vapor specific humidity.\n\n\n\n\n\n(q_liq, q_ice) = phase_partitioning_eq(ts::ThermodynamicState)\n\nPartition the phases in equilibrium into\n\nthe liquid specific humidity q_liq, and\nthe ice specific humidity q_ice,\n\nusing the liquid_fraction_equil function given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.saturation_adjustment","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.saturation_adjustment","text":"saturation_adjustment(e_int, ρ, q_tot)\n\nCompute the temperature that is consistent with\n\ne_int internal energy\nρ (moist-)air density\nq_tot total specific humidity\n\nSee also saturation_adjustment_q_t_θ_l.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.saturation_excess","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.saturation_excess","text":"saturation_excess(T, ρ, q_tot, q_liq=0, q_ice=0)\n\nThe saturation excess in equilibrium where\n\nT temperature\nρ (moist-)air density\nq_tot total specific humidity\n\nand, optionally,\n\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\nThe saturation excess is the difference between the total specific humidity q_tot and the saturation specific humidity in equilibrium, and it is defined to be nonzero only if this difference is positive.\n\n\n\n\n\nsaturation_excess(ts::ThermodynamicState)\n\nCompute the saturation excess in equilibrium, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.saturation_shum","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.saturation_shum","text":"saturation_shum(T, ρ[, q_liq=0, q_ice=0])\n\nCompute the saturation specific humidity, given\n\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq_tot total specific humidity\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\nIf the optional liquid and ice specific humidities q_tot and q_liq are given, the saturation specific humidity is that over a mixture of liquid and ice, computed in a thermodynamically consistent way from the weighted sum of the latent heats of the respective phase transitions (Pressel et al., JAMES, 2015). That is, the saturation vapor pressure and from it the saturation specific humidity are computed from a weighted mean of the latent heats of vaporization and sublimation, with the weights given by the fractions of condensate q_liq/(q_liq + q_ice) and q_ice/(q_liq + q_ice) that are liquid and ice, respectively.\n\nIf the condensate specific humidities q_liq and q_ice are not given or are both zero, the saturation specific humidity is that over a mixture of liquid and ice, with the fraction of liquid given by temperature dependent liquid_fraction_equil(T) and the fraction of ice by the complement 1 - liquid_fraction_equil(T).\n\n\n\n\n\nsaturation_shum(ts::ThermodynamicState)\n\nCompute the saturation specific humidity, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.saturation_shum_generic","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.saturation_shum_generic","text":"saturation_shum_generic(T, ρ[; phase=Liquid()])\n\nCompute the saturation specific humidity over a plane surface of condensate, given\n\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nLiquid() indicating condensate is liquid\nIce() indicating condensate is ice\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.saturation_vapor_pressure","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.saturation_vapor_pressure","text":"saturation_vapor_pressure(T, Liquid())\n\nReturn the saturation vapor pressure over a plane liquid surface at temperature T.\n\nsaturation_vapor_pressure(T, Ice())\n\nReturn the saturation vapor pressure over a plane ice surface at temperature T.\n\nsaturation_vapor_pressure(T, LH_0, Δcp)\n\nCompute the saturation vapor pressure over a plane surface by integration of the Clausius-Clepeyron relation.\n\nThe Clausius-Clapeyron relation\n\ndlog(p_v_sat)/dT = [LH_0 + Δcp * (T-T_0)]/(R_v*T^2)\n\nis integrated from the triple point temperature T_triple, using Kirchhoff's relation\n\nL = LH_0 + Δcp * (T - T_0)\n\nfor the specific latent heat L with constant isobaric specific heats of the phases. The linear dependence of the specific latent heat on temperature T allows analytic integration of the Clausius-Clapeyron relation to obtain the saturation vapor pressure p_v_sat as a function of the triple point pressure press_triple.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.soundspeed_air","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.soundspeed_air","text":"soundspeed_air(T[, q_tot=0, q_liq=0, q_ice=0])\n\nThe speed of sound in air, where\n\nT temperature\n\nand, optionally,\n\nq_tot total specific humidity\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\nWithout the specific humidity arguments, the results are that of dry air.\n\n\n\n\n\nsoundspeed_air(ts::ThermodynamicState)\n\nThe speed of sound in air given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.specific_volume","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.specific_volume","text":"specific_volume(T, p[, q_tot=0, q_liq=0, q_ice=0])\n\nThe (moist-)air specific volume from the equation of state (ideal gas law) where\n\nT air temperature\np pressure\n\nand, optionally,\n\nq_tot total specific humidity\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\nWithout the specific humidity arguments,the results are that of dry air.\n\n\n\n\n\nspecific_volume(ts::ThermodynamicState)\n\nThe (moist-)air specific volume from the equation of state (ideal gas law), given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.total_energy","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.total_energy","text":"total_energy(e_kin, e_pot, T[, q_tot=0, q_liq=0, q_ice=0])\n\nThe total energy per unit mass, given\n\ne_kin kinetic energy per unit mass\ne_pot potential energy per unit mass\nT temperature\n\nand, optionally,\n\nq_tot total specific humidity\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\nWithout the specific humidity arguments, the results are that of dry air.\n\n\n\n\n\ntotal_energy(e_kin, e_pot, ts::ThermodynamicState)\n\nThe total energy per unit mass given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Utilities/MoistThermodynamics/#CLIMA.MoistThermodynamics.virtual_pottemp","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.virtual_pottemp","text":"virtual_pottemp(T, p, q_tot, q_liq, q_ice)\n\nThe virtual temperature where\n\nT temperature\n\nand, optionally,\n\nq_tot total specific humidity\nq_liq liquid specific humidity\nq_ice ice specific humidity\n\n\n\n\n\nvirtual_pottemp(ts::ThermodynamicState)\n\nThe virtual potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/SurfaceFluxes/#SurfaceFluxes-1","page":"SurfaceFluxes","title":"SurfaceFluxes","text":"","category":"section"},{"location":"Atmos/SurfaceFluxes/#","page":"SurfaceFluxes","title":"SurfaceFluxes","text":"CurrentModule = CLIMA.SurfaceFluxes","category":"page"},{"location":"Atmos/SurfaceFluxes/#","page":"SurfaceFluxes","title":"SurfaceFluxes","text":"Surface flux functions, e.g. for buoyancy flux, friction velocity, and exchange coefficients.","category":"page"},{"location":"Atmos/SurfaceFluxes/#Byun1990-1","page":"SurfaceFluxes","title":"Byun1990","text":"","category":"section"},{"location":"Atmos/SurfaceFluxes/#","page":"SurfaceFluxes","title":"SurfaceFluxes","text":"Compute surface fluxes using the approach in Byun (1990).","category":"page"},{"location":"Atmos/SurfaceFluxes/#Plots-1","page":"SurfaceFluxes","title":"Plots","text":"","category":"section"},{"location":"Atmos/SurfaceFluxes/#","page":"SurfaceFluxes","title":"SurfaceFluxes","text":"using CLIMA.SurfaceFluxes.Byun1990\nusing Plots, LaTeXStrings\n\nRi_range = range(-1.2, stop=0.24, length=100)\nscales = [50,200,600,1000,10_000]\n\nz_0 = 1.0\nγ_m, γ_h = 15.0, 9.0\nβ_m, β_h = 4.8, 7.8\nPr_0 = 0.74\n\nplot(Ri_range,\n    [Byun1990.compute_exchange_coefficients(Ri,scale*z_0,z_0,γ_m,γ_h,β_m,β_h,Pr_0)[1]\n        for Ri in Ri_range, scale in scales], \n    xlabel=\"Bulk Richardson number (Ri_b)\", ylabel=\"Drag coefficient\", title=\"Momentum exchange coefficient\",\n    labels=scales, legendtitle=L\"z/z_0\")\n\nsavefig(\"exchange_byun1990_fig4a.svg\") # hide\nnothing # hide","category":"page"},{"location":"Atmos/SurfaceFluxes/#","page":"SurfaceFluxes","title":"SurfaceFluxes","text":"(Image: )","category":"page"},{"location":"Atmos/SurfaceFluxes/#","page":"SurfaceFluxes","title":"SurfaceFluxes","text":"Recreation of Figure 4(a) from Byun (1990)","category":"page"},{"location":"Atmos/SurfaceFluxes/#","page":"SurfaceFluxes","title":"SurfaceFluxes","text":"plot(Ri_range,\n    [Byun1990.compute_exchange_coefficients(Ri,scale*z_0,z_0,γ_m,γ_h,β_m,β_h,Pr_0)[2]\n        for Ri in Ri_range, scale in scales], \n    xlabel=\"Bulk Richardson number (Ri_b)\", ylabel=\"Exchange coefficient\", title=\"Heat exchange coefficient\",\n    labels=scales, legendtitle=L\"z/z_0\")\n\nsavefig(\"exchange_byun1990_fig4b.svg\") # hide\nnothing # hide","category":"page"},{"location":"Atmos/SurfaceFluxes/#","page":"SurfaceFluxes","title":"SurfaceFluxes","text":"(Image: )","category":"page"},{"location":"Atmos/SurfaceFluxes/#","page":"SurfaceFluxes","title":"SurfaceFluxes","text":"Recreation of Figure 4(b) from Byun (1990)","category":"page"},{"location":"Atmos/SurfaceFluxes/#Nishizawa2018-1","page":"SurfaceFluxes","title":"Nishizawa2018","text":"","category":"section"},{"location":"Atmos/SurfaceFluxes/#Plots-2","page":"SurfaceFluxes","title":"Plots","text":"","category":"section"},{"location":"Atmos/SurfaceFluxes/#","page":"SurfaceFluxes","title":"SurfaceFluxes","text":"using CLIMA.SurfaceFluxes.Nishizawa2018\nusing Plots, LaTeXStrings\n\na = 4.7\nθ = 350\nz_0 = 10\nu_ave = 10\nΔz = range(10.0, stop=100.0, length=100)\nΨ_m_tol, tol_abs, iter_max = 1e-3, 1e-3, 10\nu_star = Nishizawa2018.compute_friction_velocity.(\n    u_ave, θ, flux, Δz, z_0, a, Ψ_m_tol, tol_abs, iter_max)\nplot(u_star, Δz, title = \"Friction velocity vs dz\", xlabel = \"Friction velocity\", ylabel = \"dz\")\nsavefig(\"friction_velocity.svg\") # hide\nnothing # hide","category":"page"},{"location":"Atmos/SurfaceFluxes/#","page":"SurfaceFluxes","title":"SurfaceFluxes","text":"(Image: )","category":"page"},{"location":"Atmos/SurfaceFluxes/#API-1","page":"SurfaceFluxes","title":"API","text":"","category":"section"},{"location":"Atmos/SurfaceFluxes/#","page":"SurfaceFluxes","title":"SurfaceFluxes","text":"compute_buoyancy_flux\nByun1990.compute_MO_len\nByun1990.compute_friction_velocity\nByun1990.compute_exchange_coefficients\nNishizawa2018.compute_MO_len\nNishizawa2018.compute_friction_velocity\nNishizawa2018.compute_exchange_coefficients","category":"page"},{"location":"Atmos/SurfaceFluxes/#CLIMA.SurfaceFluxes.compute_buoyancy_flux","page":"SurfaceFluxes","title":"CLIMA.SurfaceFluxes.compute_buoyancy_flux","text":"compute_buoyancy_flux(shf, lhf, T_b, qt_b, ql_b, qi_b, alpha0_0)\n\nComputes buoyancy flux given sensible heat flux shf, latent heat flux lhf, surface boundary temperature T_b, total specific humidity qt_b, liquid specific humidity ql_b, ice specific humidity qi_b and specific alpha0_0.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/SurfaceFluxes/#CLIMA.SurfaceFluxes.Byun1990.compute_MO_len","page":"SurfaceFluxes","title":"CLIMA.SurfaceFluxes.Byun1990.compute_MO_len","text":"compute_MO_len(u, flux)\n\nComputes the Monin-Obukhov length (Eq. 3 Ref. Byun1990)\n\n\n\n\n\n","category":"function"},{"location":"Atmos/SurfaceFluxes/#CLIMA.SurfaceFluxes.Byun1990.compute_friction_velocity","page":"SurfaceFluxes","title":"CLIMA.SurfaceFluxes.Byun1990.compute_friction_velocity","text":"compute_friction_velocity(u_ave, flux, z_0, z_1, β_m, γ_m, tol_abs, iter_max)\n\nComputes roots of friction velocity equation (Eq. 10 in Ref. Byun1990)\n\nu_ave = u_* ( ln(z/z_0) - ψ_m(z/L, z_0/L) ) /κ        Eq. 10 in Ref. Byun1990\n\n\n\n\n\n","category":"function"},{"location":"Atmos/SurfaceFluxes/#CLIMA.SurfaceFluxes.Byun1990.compute_exchange_coefficients","page":"SurfaceFluxes","title":"CLIMA.SurfaceFluxes.Byun1990.compute_exchange_coefficients","text":"compute_exchange_coefficients(Ri, z_b, z_0, γ_m, γ_h, β_m, β_h, Pr_0)\n\nComputes exchange transfer coefficients:\n\nC_D  momentum exchange coefficient      (Eq. 36)\nC_H  thermodynamic exchange coefficient (Eq. 37)\nL_mo Monin-Obukhov length               (re-arranged Eq. 3)\n\n\n\n\n\n","category":"function"},{"location":"Atmos/SurfaceFluxes/#CLIMA.SurfaceFluxes.Nishizawa2018.compute_MO_len","page":"SurfaceFluxes","title":"CLIMA.SurfaceFluxes.Nishizawa2018.compute_MO_len","text":"compute_MO_len(u, θ, flux)\n\nComputes Monin-Obukhov length. Eq. 3 Ref. Nishizawa2018\n\n\n\n\n\n","category":"function"},{"location":"Atmos/SurfaceFluxes/#CLIMA.SurfaceFluxes.Nishizawa2018.compute_friction_velocity","page":"SurfaceFluxes","title":"CLIMA.SurfaceFluxes.Nishizawa2018.compute_friction_velocity","text":"compute_friction_velocity(u_ave, θ, flux, Δz, z_0, a, Ψ_m_tol, tol_abs, iter_max)\n\nComputes friction velocity, in Eq. 12 in Ref. Nishizawa2018, by solving the non-linear equation:\n\nu_ave = ustar/κ * ( ln(Δz/z_0) - Ψ_m(Δz/L) + z_0/Δz * Ψ_m(z_0/L) + R_z0 [ψ_m(z_0/L) - 1] )\n\nwhere L is a non-linear function of ustar (see compute_MO_len).\n\n\n\n\n\n","category":"function"},{"location":"Atmos/SurfaceFluxes/#CLIMA.SurfaceFluxes.Nishizawa2018.compute_exchange_coefficients","page":"SurfaceFluxes","title":"CLIMA.SurfaceFluxes.Nishizawa2018.compute_exchange_coefficients","text":"compute_exchange_coefficients(z, F_m, F_h, a, u_star, θ, flux, Pr)\n\nComputes exchange transfer coefficients:\n\nK_D  momentum exchange coefficient\nK_H  thermodynamic exchange coefficient\nL_mo Monin-Obukhov length\n\n\n\n\n\n","category":"function"},{"location":"Atmos/SurfaceFluxes/#References-1","page":"SurfaceFluxes","title":"References","text":"","category":"section"},{"location":"Atmos/SurfaceFluxes/#","page":"SurfaceFluxes","title":"SurfaceFluxes","text":"Businger, Joost A., et al. \"Flux-profile relationships in the atmospheric surface layer.\" Journal of the atmospheric Sciences 28.2 (1971): 181-189. doi: 10.1175/1520-0469(1971)028<0181:FPRITA>2.0.CO;2\nNishizawa, S., and Y. Kitamura. \"A Surface Flux Scheme Based on the Monin-Obukhov Similarity for Finite Volume Models.\" Journal of Advances in Modeling Earth Systems 10.12 (2018): 3159-3175. doi: 10.1029/2018MS001534\nByun, Daewon W. \"On the analytical solutions of flux-profile relationships for the atmospheric surface layer.\" Journal of Applied Meteorology 29.7 (1990): 652-657.   doi: 10.1175/1520-0450(1990)029<0652:OTASOF>2.0.CO;2\nWyngaard, John C. \"Modeling the planetary boundary layer-Extension to the stable case.\" Boundary-Layer Meteorology 9.4 (1975): 441-460. doi: 10.1007/BF00223393","category":"page"},{"location":"Atmos/TurbulenceConvection/#TurbulenceConvection-1","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"","category":"section"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"CurrentModule = CLIMA.TurbulenceConvection","category":"page"},{"location":"Atmos/TurbulenceConvection/#Grids-1","page":"TurbulenceConvection","title":"Grids","text":"","category":"section"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"Grids.Grid\nGrids.over_elems\nGrids.over_elems_real\nGrids.over_elems_ghost\nGrids.first_elem_above_surface\nGrids.get_z","category":"page"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.Grids.Grid","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.Grids.Grid","text":"Grid{T}\n\nA simple 1-dimensional uniform grid of type T for finite difference method.\n\n\n\n\n\n","category":"type"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.Grids.over_elems","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.Grids.over_elems","text":"over_elems(grid::Grid)\n\nGet the range of indexes to traverse real and ghost grid elements\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.Grids.over_elems_real","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.Grids.over_elems_real","text":"over_elems_real(grid::Grid)\n\nGet the range of indexes to traverse only real grid elements\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.Grids.over_elems_ghost","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.Grids.over_elems_ghost","text":"over_elems_ghost(grid::Grid)\n\nGet the range of indexes to traverse only ghost grid elements\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.Grids.first_elem_above_surface","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.Grids.first_elem_above_surface","text":"first_elem_above_surface(grid::Grid)\n\nGet the first element index above the surface\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.Grids.get_z","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.Grids.get_z","text":"get_z(grid::Grid, k::Int)\n\nGet the z-coordinate given element index\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#Grid-Operators-1","page":"TurbulenceConvection","title":"Grid Operators","text":"","category":"section"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"GridOperators.∇_z\nGridOperators.Δ_z\nGridOperators.adv_upwind","category":"page"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.GridOperators.∇_z","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.GridOperators.∇_z","text":"∇_z(f, grid::Grid)\n\nComputes the local derivative of field f: f\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.GridOperators.Δ_z","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.GridOperators.Δ_z","text":"Δ_z(f, grid::Grid)\n\nComputes the local Laplacian of field f:   (f)\n\n\n\n\n\nΔ_z(f, grid::Grid, K)\n\nComputes the local Laplacian of field f with a variable coefficient:   (K f)\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.GridOperators.adv_upwind","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.GridOperators.adv_upwind","text":"adv_upwind(ϕ, u, grid::Grid)\n\nLocal upwind advection operator u  ϕ. This operator is stable but numerically diffusive.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#State-Vector-1","page":"TurbulenceConvection","title":"State Vector","text":"","category":"section"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"StateVecs.StateVec\nStateVecs.over_sub_domains\nStateVecs.Cut","category":"page"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.StateVecs.StateVec","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.StateVecs.StateVec","text":"StateVec{T, I, NT}\n\nA state vector containing the number of subdomains, n_subdomains, a NamedTuple variable mapper, a tuple of the variable names, and a vector of vectors, containing the values for all of the variables.\n\n\n\n\n\n","category":"type"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.StateVecs.over_sub_domains","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.StateVecs.over_sub_domains","text":"over_sub_domains(state_vec::StateVec)\n\nGet list of indexes from 1 to the maximum subdomain size.\n\n\n\n\n\nover_sub_domains(state_vec::StateVec, j::Int)\n\nGet list of indexes from 1 to the maximum subdomain size, except the given index.\n\n\n\n\n\nover_sub_domains(state_vec::StateVec, name::Symbol)\n\nGet list of indexes over all subdomains for variable name.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.StateVecs.Cut","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.StateVecs.Cut","text":"Cut{I} <: AbstractCut{I}\n\nA Cut struct used to slice the state vector along the grid-element dimension. This is used to as an API to pass Cuts into local derivative/interpolation routines.\n\n\n\n\n\n","category":"type"},{"location":"Atmos/TurbulenceConvection/#Boundary-Conditions-1","page":"TurbulenceConvection","title":"Boundary Conditions","text":"","category":"section"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"BoundaryConditions.Dirichlet!\nBoundaryConditions.Neumann!\nBoundaryConditions.Top\nBoundaryConditions.Bottom","category":"page"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.BoundaryConditions.Dirichlet!","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.BoundaryConditions.Dirichlet!","text":"Dirichlet!(sv::StateVec, name::Symbol, val, grid, ::Bottom, i_sd=1)\n\nApply Dirichlet boundary conditions at the bottom of the domain\n\n\n\n\n\nDirichlet!(sv::StateVec, name::Symbol, val, grid, ::Top, i_sd=1)\n\nApply Dirichlet boundary conditions at the bottom of the domain\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.BoundaryConditions.Neumann!","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.BoundaryConditions.Neumann!","text":"Neumann!(sv::StateVec, name::Symbol, val, grid, ::Bottom, i_sd=1)\n\nApply Neumann boundary conditions at the bottom of the domain\n\n\n\n\n\nNeumann!(sv::StateVec, name::Symbol, val, grid, ::Top, i_sd=1)\n\nApply Neumann boundary conditions at the bottom of the domain\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.BoundaryConditions.Top","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.BoundaryConditions.Top","text":"Top<:BoundaryLocation\n\nLocation to apply boundary condition\n\n\n\n\n\n","category":"type"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.BoundaryConditions.Bottom","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.BoundaryConditions.Bottom","text":"Bottom<:BoundaryLocation\n\nLocation to apply boundary condition\n\n\n\n\n\n","category":"type"},{"location":"Atmos/TurbulenceConvection/#State-Vector-Functions-1","page":"TurbulenceConvection","title":"State Vector Functions","text":"","category":"section"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"StateVecFuncs.first_elem_above_surface_val\nStateVecFuncs.surface_val\nStateVecFuncs.extrap!\nStateVecFuncs.assign_ghost!\nStateVecFuncs.domain_average!\nStateVecFuncs.distribute!\nStateVecFuncs.total_covariance!\nStateVecFuncs.export_state","category":"page"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.StateVecFuncs.first_elem_above_surface_val","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.StateVecFuncs.first_elem_above_surface_val","text":"first_elem_above_surface_val(sv::StateVec, name::Symbol, grid::Grid, i_sd=1)\n\nGet the value of variable name on the first element above the surface (z_min+Δz/2).\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.StateVecFuncs.surface_val","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.StateVecFuncs.surface_val","text":"surface_val(sv::StateVec, name::Symbol, grid::Grid, i_sd=1)\n\nGet the value of variable name on the surface (z_min) by interpolating between the first ghost point and the first element above the surface\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.StateVecFuncs.extrap!","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.StateVecFuncs.extrap!","text":"extrap!(sv::StateVec, name::Symbol, grid::Grid, i_sd=1)\n\nExtrapolate variable name to the first ghost point.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.StateVecFuncs.assign_ghost!","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.StateVecFuncs.assign_ghost!","text":"assign_ghost!(sv::StateVec, name::Symbol, val, grid::Grid, i_sd=1)\n\nAssign value val to variable name for all ghost points.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.StateVecFuncs.domain_average!","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.StateVecFuncs.domain_average!","text":"domain_average!(dst::StateVec, src::StateVec, weight::StateVec\n                dst_idxs, src_idxs, weight_idx, grid::Grid)\n\nCompute the domain average in state vector dst, given state vectors src and weight, the grid grid and index iterators of source, destination and weight names src_idxs, dst_idxs, and weight_idx respectively.\n\nFormulaically, a domain-averaged variable ϕ is computed from\n\nϕ = Σ_i a_i overlineϕ_i\n\nWhere variable overlineϕ_i represents ϕ decomposed across multiple sub-domains, which are weighted by area fractions a_i.\n\nNote that domain_average! is the inverse function of distribute!.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.StateVecFuncs.distribute!","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.StateVecFuncs.distribute!","text":"distribute!(dst::StateVec, src::StateVec, dst_idxs, src_idxs, grid::Grid)\n\nDistributes values in the state vector src, to state vectors dst given the grid grid and index iterators of source and destination names src_idxs and dst_idxs respectively.\n\nFormulaically, a domain-decomposed variable overlineϕ_i is computed from\n\noverlineϕ_i = ϕ\n\nWhere variable ϕ is the domain-averaged variable, computed across multiple sub-domains.\n\nNote that distribute! is the inverse function of domain_average!.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.StateVecFuncs.total_covariance!","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.StateVecFuncs.total_covariance!","text":"total_covariance!(dst::StateVec, src::StateVec, cv::StateVec, weights::StateVec,\n                  dst_idxs, src_idxs, cv_idxs, weight_idx,\n                  grid::Grid, decompose_ϕ_ψ::Function)\n\nComputes the total covariance in state vector dst, given\n\nsrc source state vector\ncv state vector containing co-variances\nweights state vector containing weights\ndst_idxs indexes for destination state vector\ncv_idxs indexes for state vector containing co-variances\nweight_idx indexes for state vector containing weights\ngrid the grid\ndecompose_ϕ_ψ a function that receives the covariance index and                 returns the indexes for each variable. For example:                 :ϕ_idx, :ψ_idx = decompose_ϕ_ψ(:cv_ϕ_ψ)\n\nFormulaically, a total covariance between variables ϕ and ψ is computed from\n\nϕ^*ψ^* = Σ_i a_i overlineϕ_iψ_i + Σ_i Σ_j a_i a_j overlineϕ_i (overlineψ_i - overlineψ_j)\n\nWhere variable overlineϕ_i represents ϕ decomposed across multiple sub-domains, which are weighted by area fractions a_i.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#CLIMA.TurbulenceConvection.StateVecFuncs.export_state","page":"TurbulenceConvection","title":"CLIMA.TurbulenceConvection.StateVecFuncs.export_state","text":"export_state(sv::StateVec, grid::Grid, dir, filename, ::ExportType)\n\nExport StateVec to a human-readable file filename in directory dir.\n\n\n\n\n\nexport_state(sv::StateVec, dir, filename, ::ExportType = UseDat())\n\nExport StateVec to a human-readable file filename in directory dir. The z-axis is not included in the export.\n\n\n\n\n\nexport_state(sv::StateVec, grid::Grid, dir, filename, ::UseVTK)\n\nExport state vector sv to a compressed file filename in directory dir, including the z-axis, given by the grid grid.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/TurbulenceConvection/#Solving-a-diffusion-equation-1","page":"TurbulenceConvection","title":"Solving a diffusion equation","text":"","category":"section"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"Here, we solve a simple diffusion equation","category":"page"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"_t T = K ΔT + 1 qquad T = 0  Ω","category":"page"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"using Explicit Euler with StateVec and Grid constructs.","category":"page"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"\nusing CLIMA.TurbulenceConvection.Grids\nusing CLIMA.TurbulenceConvection.GridOperators\nusing CLIMA.TurbulenceConvection.BoundaryConditions\nusing CLIMA.TurbulenceConvection.StateVecs\nusing CLIMA.TurbulenceConvection.StateVecFuncs\nusing Plots\n\nn_sd = 1 # number of sub-domains\nK = 1.0 # diffusion coefficient\nmaxiter = 1000 # time-step iterations\nΔt = 0.001 # time step\n\ngrid = Grid(0.0, 1.0, 10)\nq = StateVec(((:T, n_sd),), grid)\nrhs = deepcopy(q)\n\nfor i in 1:maxiter\n  for k in over_elems_real(grid)\n    rhs[:T, k] = K*Δ_z(q[:T, Cut(k)], grid) + 1\n  end\n  for k in over_elems(grid)\n    q[:T, k] += Δt*rhs[:T, k]\n  end\n  Dirichlet!(q, :T, 0.0, grid, Top())\n  Dirichlet!(q, :T, 0.0, grid, Bottom())\nend\nplot_state(q, grid, \"./\", \"T.svg\", :T) # for visualizing\nnothing # hide","category":"page"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"(Image: )","category":"page"},{"location":"Atmos/TurbulenceConvection/#Solving-a-variable-coefficient-diffusion-equation-1","page":"TurbulenceConvection","title":"Solving a variable coefficient diffusion equation","text":"","category":"section"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"Here, we solve a variable coefficient diffusion equation","category":"page"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"_t T =   (K(z)T) + 1 qquad T = 0  Ω","category":"page"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"K(z) = 1 - 9 times H(z-5) qquad H = textheaviside","category":"page"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"using Explicit Euler.","category":"page"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"\nusing CLIMA.TurbulenceConvection.Grids\nusing CLIMA.TurbulenceConvection.GridOperators\nusing CLIMA.TurbulenceConvection.BoundaryConditions\nusing CLIMA.TurbulenceConvection.StateVecs\nusing CLIMA.TurbulenceConvection.StateVecFuncs\nusing Plots\n\nn_sd = 1 # number of sub-domains\nmaxiter = 10000 # time-step iterations\nΔt = 0.001 # time step\n\ngrid = Grid(0.0, 1.0, 10)\nunknowns = ( (:T, n_sd), )\nvars = ( (:ΔT, n_sd), (:K_thermal, n_sd) )\nq = StateVec(unknowns, grid)\ntmp = StateVec(vars, grid)\nrhs = deepcopy(q)\n\ncond_thermal(z) = z > .5 ? 1 : .1\nfor i in 1:maxiter\n  for k in over_elems_real(grid)\n    tmp[:K_thermal, k] = cond_thermal(get_z(grid, k))\n    tmp[:ΔT, k] = Δ_z(q[:T, Cut(k)], grid, tmp[:K_thermal, Cut(k)])\n    rhs[:T, k] = tmp[:ΔT, k] + 1\n  end\n  for k in over_elems(grid)\n    q[:T, k] += Δt*rhs[:T, k]\n  end\n  Dirichlet!(q, :T, 0.0, grid, Top())\n  Dirichlet!(q, :T, 0.0, grid, Bottom())\nend\nplot_state(q, grid, \"./\", \"T_varK.svg\", :T) # for visualizing\nnothing # hide","category":"page"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"(Image: )","category":"page"},{"location":"Atmos/TurbulenceConvection/#Solving-a-linear-advection-equation-1","page":"TurbulenceConvection","title":"Solving a linear advection equation","text":"","category":"section"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"Here, we solve a linear advection equation","category":"page"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"_t u + cu = 0 qquad u = 0  Ω","category":"page"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"u(t=0) = Gaussian(σ μ)","category":"page"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"using Explicit Euler method.","category":"page"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"\nusing CLIMA.TurbulenceConvection.Grids\nusing CLIMA.TurbulenceConvection.GridOperators\nusing CLIMA.TurbulenceConvection.BoundaryConditions\nusing CLIMA.TurbulenceConvection.StateVecs\nusing CLIMA.TurbulenceConvection.StateVecFuncs\nusing Plots\n\nn_sd = 1 # number of sub-domains\nmaxiter = 400 # time-step iterations\nΔt = 0.0005 # time step\n\ngrid = Grid(0.0, 1.0, 200)\nunknowns = ( (:u, n_sd), )\nvars = ( (:u_initial, n_sd), )\nq = StateVec(unknowns, grid)\ntmp = StateVec(vars, grid)\nrhs = deepcopy(q)\n\nσ, μ, c = .05, 0.3, 1.0\nT = maxiter*Δt\nic(z) = 1/(σ*sqrt(2*π))*exp(-1/2*((z-μ)/σ)^2)\nfor k in over_elems_real(grid)\n  tmp[:u_initial, k] = ic(get_z(grid, k))\n  q[:u, k] = tmp[:u_initial, k]\nend\nplot_state(tmp, grid, \"./\", \"u_initial.svg\", :u_initial) # for visualizing\nfor i in 1:maxiter\n  for k in over_elems_real(grid)\n    rhs[:u, k] = - adv_upwind(q[:u, Cut(k)], c .* [1,1,1], grid)\n  end\n  for k in over_elems(grid)\n    q[:u, k] += Δt*rhs[:u, k]\n  end\n  Dirichlet!(q, :u, 0.0, grid, Top())\n  Dirichlet!(q, :u, 0.0, grid, Bottom())\nend\nplot_state(q, grid, \"./\", \"u_final.svg\", :u) # for visualizing\nnothing # hide","category":"page"},{"location":"Atmos/TurbulenceConvection/#","page":"TurbulenceConvection","title":"TurbulenceConvection","text":"(Image: ) (Image: )","category":"page"},{"location":"ODESolvers/#ODESolvers-1","page":"ODESolvers","title":"ODESolvers","text":"","category":"section"},{"location":"ODESolvers/#LowStorageRungeKutta-1","page":"ODESolvers","title":"LowStorageRungeKutta","text":"","category":"section"},{"location":"ODESolvers/#","page":"ODESolvers","title":"ODESolvers","text":"LowStorageRungeKuttaMethod.LowStorageRungeKutta\nLowStorageRungeKuttaMethod.updatedt!","category":"page"},{"location":"ODESolvers/#GenericCallbacks-1","page":"ODESolvers","title":"GenericCallbacks","text":"","category":"section"},{"location":"ODESolvers/#","page":"ODESolvers","title":"ODESolvers","text":"GenericCallbacks.EveryXWallTimeSeconds\nGenericCallbacks.EveryXSimulationSteps","category":"page"},{"location":"ODESolvers/#ODESolvers-2","page":"ODESolvers","title":"ODESolvers","text":"","category":"section"},{"location":"ODESolvers/#","page":"ODESolvers","title":"ODESolvers","text":"ODESolvers.solve!","category":"page"},{"location":"Mesh/#Meshing-Stuff-1","page":"Mesh","title":"Meshing Stuff","text":"","category":"section"},{"location":"Mesh/#","page":"Mesh","title":"Mesh","text":"CurrentModule = CLIMA","category":"page"},{"location":"Mesh/#Topologies-1","page":"Mesh","title":"Topologies","text":"","category":"section"},{"location":"Mesh/#","page":"Mesh","title":"Mesh","text":"Topologies encode the connectivity of the elements, spatial domain interval and MPI communication.","category":"page"},{"location":"Mesh/#Types-1","page":"Mesh","title":"Types","text":"","category":"section"},{"location":"Mesh/#","page":"Mesh","title":"Mesh","text":"Topologies.AbstractTopology\nTopologies.BoxElementTopology\nTopologies.BrickTopology\nTopologies.StackedBrickTopology\nTopologies.CubedShellTopology\nTopologies.StackedCubedSphereTopology","category":"page"},{"location":"Mesh/#CLIMA.Topologies.AbstractTopology","page":"Mesh","title":"CLIMA.Topologies.AbstractTopology","text":"AbstractTopology{dim}\n\nRepresents the connectivity of individual elements, with local dimension dim.\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#CLIMA.Topologies.BoxElementTopology","page":"Mesh","title":"CLIMA.Topologies.BoxElementTopology","text":"BoxElementTopology{dim, T} <: AbstractTopology{dim}\n\nThe local topology of a larger MPI-distributed topology, represented by dim-dimensional box elements.\n\nThis contains the necessary information for the connectivity elements of the elements on the local process, along with \"ghost\" elements from neighbouring processes.\n\nFields\n\nmpicomm\nMPI communicator for communicating with neighbouring processes.\n\nelems\nRange of element indices\n\nrealelems\nRange of real (aka nonghost) element indices\n\nghostelems\nRange of ghost element indices\n\nsendelems\nArray of send element indices sorted so that\n\nelemtocoord\nElement to vertex coordinates; elemtocoord[d,i,e] is the dth coordinate of corner i of element e\nnote: Note\ncurrently coordinates always are of size 3 for (x, y, z)\n\nelemtoelem\nElement to neighboring element; elemtoelem[f,e] is the number of the element neighboring element e across face f.  If there is no neighboring element then elemtoelem[f,e] == e.\n\nelemtoface\nElement to neighboring element face; elemtoface[f,e] is the face number of the element neighboring element e across face f.  If there is no neighboring element then elemtoface[f,e] == f.\"\n\nelemtoordr\nelement to neighboring element order; elemtoordr[f,e] is the ordering number of the element neighboring element e across face f.  If there is no neighboring element then elemtoordr[f,e] == 1.\n\nelemtobndy\nElement to bounday number; elemtobndy[f,e] is the boundary number of face f of element e.  If there is a neighboring element then elemtobndy[f,e] == 0.\n\nnabrtorank\nList of the MPI ranks for the neighboring processes\n\nnabrtorecv\nRange in ghost elements to receive for each neighbor\n\nnabrtosend\nRange in sendelems to send for each neighbor\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#CLIMA.Topologies.BrickTopology","page":"Mesh","title":"CLIMA.Topologies.BrickTopology","text":"BrickTopology{dim, T} <: AbstractTopology{dim}\n\nA simple grid-based topolgy. This is a convenience wrapper around BoxElementTopology.\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#CLIMA.Topologies.StackedBrickTopology","page":"Mesh","title":"CLIMA.Topologies.StackedBrickTopology","text":"StackedBrickTopology{dim, T} <: AbstractTopology{dim}\n\nA simple grid-based topolgy, where all elements on the trailing dimension are stacked to be contiguous. This is a convenience wrapper around BoxElementTopology.\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#CLIMA.Topologies.CubedShellTopology","page":"Mesh","title":"CLIMA.Topologies.CubedShellTopology","text":"CubedShellTopology{T} <: AbstractTopology{2}\n\nA cube-shell topolgy. This is a convenience wrapper around BoxElementTopology.\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#CLIMA.Topologies.StackedCubedSphereTopology","page":"Mesh","title":"CLIMA.Topologies.StackedCubedSphereTopology","text":"StackedCubedSphereTopology{3, T} <: AbstractTopology{3}\n\nA cube-sphere topology. All elements on the same \"vertical\" dimension are stacked to be contiguous. This is a convenience wrapper around BoxElementTopology.\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#Functions-1","page":"Mesh","title":"Functions","text":"","category":"section"},{"location":"Mesh/#","page":"Mesh","title":"Mesh","text":"Topologies.cubedshellmesh\nTopologies.cubedshellwarp","category":"page"},{"location":"Mesh/#CLIMA.Topologies.cubedshellmesh","page":"Mesh","title":"CLIMA.Topologies.cubedshellmesh","text":"cubedshellmesh(T, Ne; part=1, numparts=1)\n\nGenerate a cubed mesh with each of the \"cubes\" has an Ne X Ne grid of elements.\n\nThe mesh can optionally be partitioned into numparts and this returns partition part.  This is a simple Cartesian partition and further partitioning (e.g, based on a space-filling curve) should be done before the mesh is used for computation.\n\nThis mesh returns the cubed spehere in a flatten fashion for the vertex values, and a remapping is needed to embed the mesh in a 3-D space.\n\nThe mesh structures for the cubes is as follows:\n\nx_2\n   ^\n   |\n4Ne-           +-------+\n   |           |       |\n   |           |   6   |\n   |           |       |\n3Ne-           +-------+\n   |           |       |\n   |           |   5   |\n   |           |       |\n2Ne-           +-------+\n   |           |       |\n   |           |   4   |\n   |           |       |\n Ne-   +-------+-------+-------+\n   |   |       |       |       |\n   |   |   1   |   2   |   3   |\n   |   |       |       |       |\n  0-   +-------+-------+-------+\n   |\n   +---|-------|-------|------|-> x_1\n       0      Ne      2Ne    3Ne\n\n\n\n\n\n","category":"function"},{"location":"Mesh/#CLIMA.Topologies.cubedshellwarp","page":"Mesh","title":"CLIMA.Topologies.cubedshellwarp","text":"cubedshellwarp(a, b, c, R = max(abs(a), abs(b), abs(c)))\n\nGiven points (a, b, c) on the surface of a cube, warp the points out to a spherical shell of radius R based on the equiangular gnomonic grid proposed by Ronchi, Iacono, Paolucci (1996) https://dx.doi.org/10.1006/jcph.1996.0047\n\n@article{RonchiIaconoPaolucci1996,\n  title={The ``cubed sphere'': a new method for the solution of partial\n         differential equations in spherical geometry},\n  author={Ronchi, C. and Iacono, R. and Paolucci, P. S.},\n  journal={Journal of Computational Physics},\n  volume={124},\n  number={1},\n  pages={93--114},\n  year={1996},\n  doi={10.1006/jcph.1996.0047}\n}\n\n\n\n\n\n","category":"function"},{"location":"Mesh/#Grids-1","page":"Mesh","title":"Grids","text":"","category":"section"},{"location":"Mesh/#","page":"Mesh","title":"Mesh","text":"Grids specify the approximation within each element, and any necessary warping.","category":"page"},{"location":"Mesh/#","page":"Mesh","title":"Mesh","text":"Grids.DiscontinuousSpectralElementGrid","category":"page"},{"location":"Mesh/#CLIMA.Grids.DiscontinuousSpectralElementGrid","page":"Mesh","title":"CLIMA.Grids.DiscontinuousSpectralElementGrid","text":"DiscontinuousSpectralElementGrid(topology; FloatType, DeviceArray,\n                                 polynomialorder,\n                                 meshwarp = (x...)->identity(x))\n\nGenerate a discontinuous spectral element (tensor product, Legendre-Gauss-Lobatto) grid/mesh from a topology, where the order of the elements is given by polynomialorder. DeviceArray gives the array type used to store the data (CuArray or Array), and the coordinate points will be of FloatType.\n\nThe optional meshwarp function allows the coordinate points to be warped after the mesh is created; the mesh degrees of freedom are orginally assigned using a trilinear blend of the element corner locations.\n\n\n\n\n\n","category":"type"},{"location":"AtmosDycore/#AtmosDycore-1","page":"AtmosDycore","title":"AtmosDycore","text":"","category":"section"},{"location":"AtmosDycore/#","page":"AtmosDycore","title":"AtmosDycore","text":"CurrentModule = CLIMA.AtmosDycore","category":"page"},{"location":"AtmosDycore/#","page":"AtmosDycore","title":"AtmosDycore","text":"getrhsfunction","category":"page"},{"location":"AtmosDycore/#CLIMA.AtmosDycore.getrhsfunction","page":"AtmosDycore","title":"CLIMA.AtmosDycore.getrhsfunction","text":"getrhsfunction(disc::AbstractAtmosDiscretization)\n\nThe spatial discretizations are of the form Q = f(Q), and this function returns the handle to right-hand side function f of the disc\n\n\n\n\n\n","category":"function"},{"location":"AtmosDycore/#VanillaAtmosDiscretizations-1","page":"AtmosDycore","title":"VanillaAtmosDiscretizations","text":"","category":"section"},{"location":"AtmosDycore/#","page":"AtmosDycore","title":"AtmosDycore","text":"A discretization adds additional information for the atmosphere problem.","category":"page"},{"location":"AtmosDycore/#","page":"AtmosDycore","title":"AtmosDycore","text":"VanillaAtmosDiscretizations.VanillaAtmosDiscretization\nVanillaAtmosDiscretizations.estimatedt","category":"page"},{"location":"AtmosDycore/#CLIMA.AtmosDycore.VanillaAtmosDiscretizations.VanillaAtmosDiscretization","page":"AtmosDycore","title":"CLIMA.AtmosDycore.VanillaAtmosDiscretizations.VanillaAtmosDiscretization","text":"VanillaAtmosDiscretization{nmoist, ntrace}(grid; gravity = true,\nviscosity = 0)\n\nGiven a 'grid <: AbstractGrid' this construct all the data necessary to run a vanilla discontinuous Galerkin discretization of the the compressible Euler equations with nmoist moisture variables and ntrace tracer variables. If the boolean keyword argument gravity is true then gravity is used otherwise it is not. Isotropic viscosity can be used if viscosity is set to a positive constant.\n\n\n\n\n\n","category":"type"},{"location":"AtmosDycore/#CLIMA.AtmosDycore.VanillaAtmosDiscretizations.estimatedt","page":"AtmosDycore","title":"CLIMA.AtmosDycore.VanillaAtmosDiscretizations.estimatedt","text":"estimatedt(disc::VanillaAtmosDiscretization, Q::MPIStateArray)\n\nGiven a discretization disc and a state Q compute an estimate for the time step\n\ntodo: Todo\nThis estimate is currently very conservative, needs to be revisited\n\n\n\n\n\n","category":"function"},{"location":"AtmosDycore/#AtmosStateArray-1","page":"AtmosDycore","title":"AtmosStateArray","text":"","category":"section"},{"location":"AtmosDycore/#","page":"AtmosDycore","title":"AtmosDycore","text":"Storage for the state of a discretization.","category":"page"},{"location":"AtmosDycore/#","page":"AtmosDycore","title":"AtmosDycore","text":"AtmosStateArrays.AtmosStateArray\nAtmosStateArrays.postrecvs!\nAtmosStateArrays.startexchange!\nAtmosStateArrays.finishexchange!","category":"page"},{"location":"CodingConventions/#Coding-Conventions-1","page":"Coding Conventions","title":"Coding Conventions","text":"","category":"section"},{"location":"CodingConventions/#","page":"Coding Conventions","title":"Coding Conventions","text":"A list of recommended coding conventions.","category":"page"},{"location":"CodingConventions/#","page":"Coding Conventions","title":"Coding Conventions","text":"There are good recommendations in the Julia style-guide:\nhttps://docs.julialang.org/en/v1/manual/style-guide/index.html\nhttps://docs.julialang.org/en/v0.6/manual/packages/#Guidelines-for-naming-a-package-1\nPlease only use Unicode characters that are within our list of acceptable Unicode characters (in AcceptableUnicode.md).\nModules, and class names (structs), should follow TitleCase convention. Note that class names cannot coincide with module names.\nFunction names should be lowercase, with words separated by underscores as necessary to improve readability.\nVariable names follow the same convention as function names. Follow CMIP conventions (http://clipc-services.ceda.ac.uk/dreq/) where possible and practicable.\nMake names consistent, distinctive, and meaningful.\nDocument design and purpose, rather than mechanics and implementation (document interfaces and embed documentation in code).\nAvoid variable names that coincide with module and class names, as well as function/variable names that are natively supported.\nNever use the characters 'l' (lowercase letter el), 'O' (uppercase letter oh), or 'I' (uppercase letter eye) as single character variable names.\nTwo white spaces are used for indent. This is not part of the standard convention, but recent development efforts have been using this indentation style (e.g., Google's Tensorflow), and this style is being used here also.\nKISS (keep it simple stupid).\nTry to limit all lines to a maximum of 79 characters.\nSingle access point - if a variable/constant is defined more than once, then move it into a module and import (or \"using\") to that module to access the variable in order to enforce a single access point (to avoid consistency issues). Any time a chunk of code is used more than once, or when several similar versions exist across the codebase, consider generalizing this functionality and using a new function to avoid replicating code\n\"import\"/\"using\" should be grouped in the following order:\nStandard library imports.\nRelated third party imports.\nLocal application/library specific imports.\nUse a blank line between each group of imports.","category":"page"},{"location":"CodingConventions/#Why-do-we-limit-our-Unicode-use?-1","page":"Coding Conventions","title":"Why do we limit our Unicode use?","text":"","category":"section"},{"location":"CodingConventions/#","page":"Coding Conventions","title":"Coding Conventions","text":"Some characters are visibly indistinguishable. Capital \"a\" and capital alpha are visibly indistinguishable, but are recognized as separate characters (e.g., search distinguishable).\nSome characters are difficult to read. Sometimes, the overline/overdot/hats overlap with characters making them difficult to see.\nPortability issues. Unicode does not render in Jupyter notebook natively (on OSX).\nIf it does improve readability enough, and are not worried about portability, we may introduce a list of permissible characters that are commonly used.","category":"page"},{"location":"AcceptableUnicode/#Acceptable-Unicode-characters:-1","page":"Acceptable Unicode characters:","title":"Acceptable Unicode characters:","text":"","category":"section"},{"location":"AcceptableUnicode/#","page":"Acceptable Unicode characters:","title":"Acceptable Unicode characters:","text":"Using Unicode seems to be irresistible. However, we must ensure avoiding problematic Unicode usage.","category":"page"},{"location":"AcceptableUnicode/#","page":"Acceptable Unicode characters:","title":"Acceptable Unicode characters:","text":"Below is a list of acceptable Unicode characters. All characters not listed below are forbidden. We forbid the use of accents (dot, hat, vec, etc.), because this can lead to visually ambiguous characters.","category":"page"},{"location":"AcceptableUnicode/#Acceptable-lower-case-Greek-letters:-1","page":"Acceptable Unicode characters:","title":"Acceptable lower-case Greek letters:","text":"","category":"section"},{"location":"AcceptableUnicode/#","page":"Acceptable Unicode characters:","title":"Acceptable Unicode characters:","text":"α # (alpha)\nβ # (beta)\nδ # (delta)\nϵ # (epsilon)\nε # (varepsilon)\nγ # (gamma)\nκ # (kappa)\nλ # (lambda)\nμ # (mu)\nν # (nu)\nη # (eta)\nω # (omega)\nπ # (pi)\nρ # (rho)\nσ # (sigma)\nθ # (theta)\nχ # (chi)\nξ # (xi)\nζ # (zeta)\nϕ # (psi)\nφ # (varphi)","category":"page"},{"location":"AcceptableUnicode/#Acceptable-upper-case-Greek-letters:-1","page":"Acceptable Unicode characters:","title":"Acceptable upper-case Greek letters:","text":"","category":"section"},{"location":"AcceptableUnicode/#","page":"Acceptable Unicode characters:","title":"Acceptable Unicode characters:","text":"Δ # (Delta)\n∑ # (Sigma)\nΓ # (Gamma)\nΩ # (Omega)\nΨ # (Psi)\n<!-- Φ # (Phi) removed in favor of lowercase psi -->","category":"page"},{"location":"AcceptableUnicode/#Acceptable-mathematical-symbols:-1","page":"Acceptable Unicode characters:","title":"Acceptable mathematical symbols:","text":"","category":"section"},{"location":"AcceptableUnicode/#","page":"Acceptable Unicode characters:","title":"Acceptable Unicode characters:","text":"∫ # (int)\n∬ # (iint)\n∭ # (iiint)\n∞ # (infinity)\n≈ # (approx)\n∂ # (partial)\n∇ # (nabla/del), note that nabla and del are indistinguishable\n∀ # (forall)\n≥ # (greater than equal to)\n≤ # (less than equal to)\n<!-- ∈ # (in) removed in favor of epsilon -->","category":"page"},{"location":"VariableList/#CliMA-Variable-List:-1","page":"CliMA Variable List:","title":"CliMA Variable List:","text":"","category":"section"},{"location":"VariableList/#","page":"CliMA Variable List:","title":"CliMA Variable List:","text":"This document is currently for collaborators within the project with access to the Overleaf CliMA-Atmos docs. The purpose of this page is to unify the naming conventions used in the Overleaf document in a manner useful for coding. This document suggests 'reserved' variable names in <property>_<species> format with the default working fluid (no-subscript) being moist air. Contributors to the CliMA repository are welcome to suggest changes when necessary.","category":"page"},{"location":"VariableList/#Names-reserved-for-'use-and-throw'-/-debug-variables-1","page":"CliMA Variable List:","title":"Names reserved for 'use and throw' / debug variables","text":"","category":"section"},{"location":"VariableList/#","page":"CliMA Variable List:","title":"CliMA Variable List:","text":"dummy\nscratch","category":"page"},{"location":"VariableList/#.1-Working-Fluid-and-Equation-of-State-1","page":"CliMA Variable List:","title":"2.1  Working Fluid and Equation of State","text":"","category":"section"},{"location":"VariableList/#","page":"CliMA Variable List:","title":"CliMA Variable List:","text":"q_dry = dry air mass fraction\nq_vap = specific humidity, vapour\nq_liq = specific humidity, liquid\nq_ice = specific humidity, ice\nq_con = specific humidity, condensate\nq_tot = specific humidity, total\n\n\nP_<species>     = pressure, species (no subscript == default working fluid moist air) \nρ_<species>     = density, species (no subscript == default working fluid moist air) \nR_m             = gas constant, moist\nR_d             = gas constant, dry\nR_v             = gas constant, water vapour\nT               = temperature, moist air \nT_<species>     = temperature, species ","category":"page"},{"location":"VariableList/#.2-Mass-Balance-1","page":"CliMA Variable List:","title":"2.2 Mass Balance","text":"","category":"section"},{"location":"VariableList/#","page":"CliMA Variable List:","title":"CliMA Variable List:","text":"dt              = time increment\nu               = x-velocity \nv               = y-velocity\nw               = z-velocity\nU\t\t= x-momentum \nV\t\t= y-momentum\nW\t\t= z=momentum ","category":"page"},{"location":"VariableList/#.3-Moisture-balances-1","page":"CliMA Variable List:","title":"2.3 Moisture balances","text":"","category":"section"},{"location":"VariableList/#","page":"CliMA Variable List:","title":"CliMA Variable List:","text":"source_qt           = local source/sink of water mass [S_qt]\ndiffusiveflux_vap   = diffusive flux, water vapour\ndiffusiveflux_liq   = diffusive flux, cloud liquid\ndiffusiveflux_ice   = diffusive flux, cloud ice\ndiffusiveflux_tot   = diffusive flux, total","category":"page"},{"location":"VariableList/#.4-Momentum-balances-1","page":"CliMA Variable List:","title":"2.4 Momentum balances","text":"","category":"section"},{"location":"VariableList/#","page":"CliMA Variable List:","title":"CliMA Variable List:","text":"U               = x-momentum \nV               = y-momentum \nW               = z-momentum (2D/3D: this is the vertical coordinate)\nΩ_x             = x-angular momentum\nΩ_y             = y-angular momentum\nΩ_z             = z-angular momentum\nτ_xx            = stress tensor ((1,1) component)\nτ_<ij>          = replace ij with combination of x/y/z to recover appropriate value\nλ_stokes        = Stokes parameter","category":"page"},{"location":"VariableList/#.5-Energy-balance-1","page":"CliMA Variable List:","title":"2.5 Energy balance","text":"","category":"section"},{"location":"VariableList/#","page":"CliMA Variable List:","title":"CliMA Variable List:","text":"<Lower case e_<type> suggests specific (per unit mass) quantities>\ne_kin_<spe>      = specific energy per unit volume, kinetic\ne_pot_<spe>      = specific energy per unit volume, potential\ne_int_<spe>      = specific energy per unit volume, internal\ne_tot_<spe>      = specific energy per unit volume, total\n\nE_kin_<spe>      = energy, kinetic\nE_pot_<spe>      = energy, potential\nE_int_<spe>      = energy, internal\nE_tot_<spe>      = energy, total\n\ncv_m             = isochoric specific heat, moist air\ncv_d             = isochoric specific heat, dry air\ncv_l             = isochoric specific heat, liquid water\ncv_v             = isochoric specific heat, water vapour\ncv_i             = isochoric specific heat, ice\n\ncp_m             = isobaric specific heat, moist air\ncp_d             = isobaric specific heat, dry air\ncp_l             = isobaric specific heat, liquid water\ncp_v             = isobaric specific heat, water vapour\ncp_i             = isobaric specific heat, ice","category":"page"},{"location":"VariableList/#TODO-1","page":"CliMA Variable List:","title":"TODO","text":"","category":"section"},{"location":"VariableList/#","page":"CliMA Variable List:","title":"CliMA Variable List:","text":"Update with list of additional parameters / source terms as necessary","category":"page"}]
}
